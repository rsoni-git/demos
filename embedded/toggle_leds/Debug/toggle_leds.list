
toggle_leds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000380  08000388  00010388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000380  08000380  00010388  2**0
                  CONTENTS
  4 .ARM          00000000  08000380  08000380  00010388  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000380  08000388  00010388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000380  08000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000384  08000384  00010384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010388  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010388  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000109  00000000  00000000  000103b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000af  00000000  00000000  000104c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  00010570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000038  00000000  00000000  000105c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001e35  00000000  00000000  000105f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000651  00000000  00000000  0001242d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007178  00000000  00000000  00012a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00019bf6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000080  00000000  00000000  00019c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000368 	.word	0x08000368

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000368 	.word	0x08000368

080001e8 <delay>:

#include <stdint.h>
#include <stdbool.h>
#include <unistd.h>

void delay ( uint32_t ui32Count ) {
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
    for(uint32_t ui32Iter = 0; ui32Iter < ui32Count; ui32Iter++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
	...

08000214 <main>:

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  _RCC_AHB1EN_R_BASE |= (1UL << 3);
 8000218:	4b28      	ldr	r3, [pc, #160]	; (80002bc <main+0xa8>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a27      	ldr	r2, [pc, #156]	; (80002bc <main+0xa8>)
 800021e:	f043 0308 	orr.w	r3, r3, #8
 8000222:	6013      	str	r3, [r2, #0]

  _GPIOD_MODE_R |= (1UL << 24);
 8000224:	4b26      	ldr	r3, [pc, #152]	; (80002c0 <main+0xac>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a25      	ldr	r2, [pc, #148]	; (80002c0 <main+0xac>)
 800022a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800022e:	6013      	str	r3, [r2, #0]
  _GPIOD_MODE_R &=~ (1UL << 25);
 8000230:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <main+0xac>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a22      	ldr	r2, [pc, #136]	; (80002c0 <main+0xac>)
 8000236:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800023a:	6013      	str	r3, [r2, #0]

  _GPIOD_MODE_R |= (1UL << 26);
 800023c:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <main+0xac>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a1f      	ldr	r2, [pc, #124]	; (80002c0 <main+0xac>)
 8000242:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000246:	6013      	str	r3, [r2, #0]
  _GPIOD_MODE_R &=~ (1UL << 27);
 8000248:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <main+0xac>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a1c      	ldr	r2, [pc, #112]	; (80002c0 <main+0xac>)
 800024e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000252:	6013      	str	r3, [r2, #0]

  _GPIOD_MODE_R |= (1UL << 28);
 8000254:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <main+0xac>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a19      	ldr	r2, [pc, #100]	; (80002c0 <main+0xac>)
 800025a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800025e:	6013      	str	r3, [r2, #0]
  _GPIOD_MODE_R &=~ (1UL << 29);
 8000260:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <main+0xac>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a16      	ldr	r2, [pc, #88]	; (80002c0 <main+0xac>)
 8000266:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800026a:	6013      	str	r3, [r2, #0]

  _GPIOD_MODE_R |= (1UL << 30);
 800026c:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <main+0xac>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a13      	ldr	r2, [pc, #76]	; (80002c0 <main+0xac>)
 8000272:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000276:	6013      	str	r3, [r2, #0]
  _GPIOD_MODE_R &=~ (1UL << 31);
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <main+0xac>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a10      	ldr	r2, [pc, #64]	; (80002c0 <main+0xac>)
 800027e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000282:	6013      	str	r3, [r2, #0]

  while ( true ) {
    _GPIOD_OD_R ^= (1U << 12);
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <main+0xb0>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <main+0xb0>)
 800028a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800028e:	6013      	str	r3, [r2, #0]
    _GPIOD_OD_R ^= (1U << 13);
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <main+0xb0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0b      	ldr	r2, [pc, #44]	; (80002c4 <main+0xb0>)
 8000296:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800029a:	6013      	str	r3, [r2, #0]
    _GPIOD_OD_R ^= (1U << 14);
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <main+0xb0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a08      	ldr	r2, [pc, #32]	; (80002c4 <main+0xb0>)
 80002a2:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80002a6:	6013      	str	r3, [r2, #0]
    _GPIOD_OD_R ^= (1U << 15);
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <main+0xb0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a05      	ldr	r2, [pc, #20]	; (80002c4 <main+0xb0>)
 80002ae:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80002b2:	6013      	str	r3, [r2, #0]

    delay(1000000);
 80002b4:	4804      	ldr	r0, [pc, #16]	; (80002c8 <main+0xb4>)
 80002b6:	f7ff ff97 	bl	80001e8 <delay>
    _GPIOD_OD_R ^= (1U << 12);
 80002ba:	e7e3      	b.n	8000284 <main+0x70>
 80002bc:	40023830 	.word	0x40023830
 80002c0:	40020c00 	.word	0x40020c00
 80002c4:	40020c14 	.word	0x40020c14
 80002c8:	000f4240 	.word	0x000f4240

080002cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002cc:	480d      	ldr	r0, [pc, #52]	; (8000304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d4:	480c      	ldr	r0, [pc, #48]	; (8000308 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d6:	490d      	ldr	r1, [pc, #52]	; (800030c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d8:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <LoopForever+0xe>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002dc:	e002      	b.n	80002e4 <LoopCopyDataInit>

080002de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e2:	3304      	adds	r3, #4

080002e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e8:	d3f9      	bcc.n	80002de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ea:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ec:	4c0a      	ldr	r4, [pc, #40]	; (8000318 <LoopForever+0x16>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f0:	e001      	b.n	80002f6 <LoopFillZerobss>

080002f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f4:	3204      	adds	r2, #4

080002f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f8:	d3fb      	bcc.n	80002f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fa:	f000 f811 	bl	8000320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fe:	f7ff ff89 	bl	8000214 <main>

08000302 <LoopForever>:

LoopForever:
    b LoopForever
 8000302:	e7fe      	b.n	8000302 <LoopForever>
  ldr   r0, =_estack
 8000304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800030c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000310:	08000388 	.word	0x08000388
  ldr r2, =_sbss
 8000314:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000318:	2000001c 	.word	0x2000001c

0800031c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC_IRQHandler>
	...

08000320 <__libc_init_array>:
 8000320:	b570      	push	{r4, r5, r6, lr}
 8000322:	4d0d      	ldr	r5, [pc, #52]	; (8000358 <__libc_init_array+0x38>)
 8000324:	4c0d      	ldr	r4, [pc, #52]	; (800035c <__libc_init_array+0x3c>)
 8000326:	1b64      	subs	r4, r4, r5
 8000328:	10a4      	asrs	r4, r4, #2
 800032a:	2600      	movs	r6, #0
 800032c:	42a6      	cmp	r6, r4
 800032e:	d109      	bne.n	8000344 <__libc_init_array+0x24>
 8000330:	4d0b      	ldr	r5, [pc, #44]	; (8000360 <__libc_init_array+0x40>)
 8000332:	4c0c      	ldr	r4, [pc, #48]	; (8000364 <__libc_init_array+0x44>)
 8000334:	f000 f818 	bl	8000368 <_init>
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	10a4      	asrs	r4, r4, #2
 800033c:	2600      	movs	r6, #0
 800033e:	42a6      	cmp	r6, r4
 8000340:	d105      	bne.n	800034e <__libc_init_array+0x2e>
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f855 3b04 	ldr.w	r3, [r5], #4
 8000348:	4798      	blx	r3
 800034a:	3601      	adds	r6, #1
 800034c:	e7ee      	b.n	800032c <__libc_init_array+0xc>
 800034e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000352:	4798      	blx	r3
 8000354:	3601      	adds	r6, #1
 8000356:	e7f2      	b.n	800033e <__libc_init_array+0x1e>
 8000358:	08000380 	.word	0x08000380
 800035c:	08000380 	.word	0x08000380
 8000360:	08000380 	.word	0x08000380
 8000364:	08000384 	.word	0x08000384

08000368 <_init>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr

08000374 <_fini>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr
